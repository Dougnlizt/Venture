/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.tjcs.venture;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileInputStream;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.tjcs.venture.Utilities.Grade;
import org.tjcs.venture.Utilities.Tier;

/**
 *
 * @author dougthompson
 */
public class LotteryFrame extends javax.swing.JFrame implements ActionListener {

    /**
     * Creates new form LotteryFrame
     */
    public LotteryFrame() {
        initComponents();
        initMyComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButtonBrowseForDestination = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldMasterFileSource = new javax.swing.JTextField();
        jTextFieldDestination = new javax.swing.JTextField();
        jButtonBrowseForMasterFile = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jCheckBox12th = new javax.swing.JCheckBox();
        jLabel20 = new javax.swing.JLabel();
        jCheckBox11th = new javax.swing.JCheckBox();
        jTextField12th = new javax.swing.JTextField();
        jTextField11th = new javax.swing.JTextField();
        jTextField10th = new javax.swing.JTextField();
        jTextField9th = new javax.swing.JTextField();
        jTextField8th = new javax.swing.JTextField();
        jTextField7th = new javax.swing.JTextField();
        jTextField6th = new javax.swing.JTextField();
        jTextField5th = new javax.swing.JTextField();
        jTextField4th = new javax.swing.JTextField();
        jCheckBox10th = new javax.swing.JCheckBox();
        jCheckBox9th = new javax.swing.JCheckBox();
        jCheckBox8th = new javax.swing.JCheckBox();
        jCheckBox7th = new javax.swing.JCheckBox();
        jCheckBox6th = new javax.swing.JCheckBox();
        jCheckBox5th = new javax.swing.JCheckBox();
        jCheckBox4th = new javax.swing.JCheckBox();
        jTextField3rd = new javax.swing.JTextField();
        jTextField2nd = new javax.swing.JTextField();
        jTextField1st = new javax.swing.JTextField();
        jTextFieldKinder = new javax.swing.JTextField();
        jCheckBox3rd = new javax.swing.JCheckBox();
        jCheckBox2nd = new javax.swing.JCheckBox();
        jCheckBox1st = new javax.swing.JCheckBox();
        jCheckBoxKinder = new javax.swing.JCheckBox();
        jScrollPaneProspectiveStudents = new javax.swing.JScrollPane();
        jTablePropsectiveStudents = new javax.swing.JTable();
        jTextFieldFilterStudents = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabelNumRecords = new javax.swing.JLabel();
        jButtonStartLottery = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonBrowseForDestination.setText("Browse");

        jLabel1.setText("Master File");

        jButtonBrowseForMasterFile.setText("Browse");
        jButtonBrowseForMasterFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseForMasterFileActionPerformed(evt);
            }
        });

        jLabel2.setText("Output");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextFieldMasterFileSource)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonBrowseForMasterFile))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextFieldDestination)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonBrowseForDestination)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldMasterFileSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBrowseForMasterFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldDestination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBrowseForDestination)
                    .addComponent(jLabel2))
                .addContainerGap())
        );

        jPanel2.setSize(new java.awt.Dimension(100, 10));

        jLabel3.setText("Select All");

        jLabel4.setText("Clear All");

        jLabel6.setText("Grade");

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("12th");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("11th");

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("10th");

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("9th");

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("8th");

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("7th");

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("6th");

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("5th");

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("4th");

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("3rd");

        jLabel16.setText("2nd");

        jLabel17.setText("1st");

        jLabel18.setText("Kinder");

        jLabel19.setText("Select");

        jCheckBox12th.setSelected(true);
        jCheckBox12th.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxActionPerformed(evt);
            }
        });

        jLabel20.setText("Available Seats");

        jCheckBox11th.setSelected(true);
        jCheckBox11th.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxActionPerformed(evt);
            }
        });

        jTextField12th.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField12th.setText("0");
        jTextField12th.setPreferredSize(new java.awt.Dimension(5, 28));

        jTextField11th.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField11th.setText("0");
        jTextField11th.setPreferredSize(new java.awt.Dimension(5, 28));

        jTextField10th.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField10th.setText("0");
        jTextField10th.setPreferredSize(new java.awt.Dimension(5, 28));

        jTextField9th.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField9th.setText("0");
        jTextField9th.setPreferredSize(new java.awt.Dimension(5, 28));

        jTextField8th.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField8th.setText("0");
        jTextField8th.setPreferredSize(new java.awt.Dimension(5, 28));

        jTextField7th.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField7th.setText("0");
        jTextField7th.setPreferredSize(new java.awt.Dimension(5, 28));

        jTextField6th.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField6th.setText("0");
        jTextField6th.setPreferredSize(new java.awt.Dimension(5, 28));

        jTextField5th.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField5th.setText("0");
        jTextField5th.setPreferredSize(new java.awt.Dimension(5, 28));

        jTextField4th.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField4th.setText("0");
        jTextField4th.setPreferredSize(new java.awt.Dimension(5, 28));

        jCheckBox10th.setSelected(true);
        jCheckBox10th.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxActionPerformed(evt);
            }
        });

        jCheckBox9th.setSelected(true);
        jCheckBox9th.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxActionPerformed(evt);
            }
        });

        jCheckBox8th.setSelected(true);
        jCheckBox8th.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxActionPerformed(evt);
            }
        });

        jCheckBox7th.setSelected(true);
        jCheckBox7th.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxActionPerformed(evt);
            }
        });

        jCheckBox6th.setSelected(true);
        jCheckBox6th.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxActionPerformed(evt);
            }
        });

        jCheckBox5th.setSelected(true);
        jCheckBox5th.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxActionPerformed(evt);
            }
        });

        jCheckBox4th.setSelected(true);
        jCheckBox4th.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxActionPerformed(evt);
            }
        });

        jTextField3rd.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField3rd.setText("0");
        jTextField3rd.setPreferredSize(new java.awt.Dimension(5, 28));

        jTextField2nd.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField2nd.setText("0");
        jTextField2nd.setPreferredSize(new java.awt.Dimension(5, 28));

        jTextField1st.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1st.setText("0");
        jTextField1st.setPreferredSize(new java.awt.Dimension(5, 28));

        jTextFieldKinder.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldKinder.setText("0");
        jTextFieldKinder.setPreferredSize(new java.awt.Dimension(5, 28));

        jCheckBox3rd.setSelected(true);
        jCheckBox3rd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxActionPerformed(evt);
            }
        });

        jCheckBox2nd.setSelected(true);
        jCheckBox2nd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxActionPerformed(evt);
            }
        });

        jCheckBox1st.setSelected(true);
        jCheckBox1st.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxActionPerformed(evt);
            }
        });

        jCheckBoxKinder.setSelected(true);
        jCheckBoxKinder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(6, 6, 6)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox12th)
                    .addComponent(jTextField12th, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox11th)
                    .addComponent(jTextField11th, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox10th)
                    .addComponent(jTextField10th, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                    .addComponent(jCheckBox9th)
                    .addComponent(jTextField9th, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                    .addComponent(jCheckBox8th)
                    .addComponent(jTextField8th, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox7th)
                    .addComponent(jTextField7th, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel12)
                    .addComponent(jCheckBox6th)
                    .addComponent(jTextField6th, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jTextField5th, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox5th)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jTextField4th, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox4th)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jTextField3rd, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox3rd)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jTextField2nd, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox2nd)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jTextField1st, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox1st)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jTextFieldKinder, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxKinder)
                    .addComponent(jLabel18))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox12th, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox10th, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox9th, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox8th, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox7th, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox6th, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox5th, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox4th, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox3rd, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox2nd, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox1st, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxKinder, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField12th, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField11th, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField10th, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField9th, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField8th, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField7th, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField5th, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField4th, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField3rd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2nd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1st, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldKinder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField6th, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jCheckBox11th, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTablePropsectiveStudents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Lottery Draw", "Last Name", "First Name", "Tier", "Grade", "Family Key", "Wait List Siblings"
            }
        ));
        jScrollPaneProspectiveStudents.setViewportView(jTablePropsectiveStudents);

        jTextFieldFilterStudents.setToolTipText("");

        jLabel21.setText("Search Prospective Students:");

        jLabel22.setText("Number of Prospective Students:");

        jLabelNumRecords.setText("N/A");
        jLabelNumRecords.setToolTipText("");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPaneProspectiveStudents)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelNumRecords, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldFilterStudents, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldFilterStudents, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21)
                    .addComponent(jLabel22)
                    .addComponent(jLabelNumRecords))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneProspectiveStudents, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButtonStartLottery.setText("<html><center>Start<br/>Lottery</center></html>");
        jButtonStartLottery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartLotteryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonStartLottery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jButtonStartLottery, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonStartLotteryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartLotteryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonStartLotteryActionPerformed

    private void jButtonBrowseForMasterFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseForMasterFileActionPerformed
        selectSourceFile();
    }//GEN-LAST:event_jButtonBrowseForMasterFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LotteryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LotteryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LotteryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LotteryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LotteryFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBrowseForDestination;
    private javax.swing.JButton jButtonBrowseForMasterFile;
    private javax.swing.JButton jButtonStartLottery;
    private javax.swing.JCheckBox jCheckBox10th;
    private javax.swing.JCheckBox jCheckBox11th;
    private javax.swing.JCheckBox jCheckBox12th;
    private javax.swing.JCheckBox jCheckBox1st;
    private javax.swing.JCheckBox jCheckBox2nd;
    private javax.swing.JCheckBox jCheckBox3rd;
    private javax.swing.JCheckBox jCheckBox4th;
    private javax.swing.JCheckBox jCheckBox5th;
    private javax.swing.JCheckBox jCheckBox6th;
    private javax.swing.JCheckBox jCheckBox7th;
    private javax.swing.JCheckBox jCheckBox8th;
    private javax.swing.JCheckBox jCheckBox9th;
    private javax.swing.JCheckBox jCheckBoxKinder;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelNumRecords;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPaneProspectiveStudents;
    private javax.swing.JTable jTablePropsectiveStudents;
    private javax.swing.JTextField jTextField10th;
    private javax.swing.JTextField jTextField11th;
    private javax.swing.JTextField jTextField12th;
    private javax.swing.JTextField jTextField1st;
    private javax.swing.JTextField jTextField2nd;
    private javax.swing.JTextField jTextField3rd;
    private javax.swing.JTextField jTextField4th;
    private javax.swing.JTextField jTextField5th;
    private javax.swing.JTextField jTextField6th;
    private javax.swing.JTextField jTextField7th;
    private javax.swing.JTextField jTextField8th;
    private javax.swing.JTextField jTextField9th;
    private javax.swing.JTextField jTextFieldDestination;
    private javax.swing.JTextField jTextFieldFilterStudents;
    private javax.swing.JTextField jTextFieldKinder;
    private javax.swing.JTextField jTextFieldMasterFileSource;
    // End of variables declaration//GEN-END:variables

    private List<DB_RecordCell> dbRecordCellList;
    private List<Lottery> lotteryList;
    private Map<Grade, Lottery> gradeLotteryMap;
    private final String[] headerCols = {"Lottery Draw", "Last Name", "First Name", "Tier", "Grade", "Family Key", "Wait List Siblings"};
    private Map<Grade, JCheckBox> gradeCheckBoxesMap;
    private Map<Grade, JTextField> gradeAvailableSeatsMap;
    
    private void initMyComponents() {
        dbRecordCellList = new ArrayList<>();
        lotteryList = new ArrayList<>();
        
        gradeCheckBoxesMap = new HashMap<>();
        gradeCheckBoxesMap.put(Grade.TWELFTH, jCheckBox12th);
        gradeCheckBoxesMap.put(Grade.ELEVENTH, jCheckBox11th);
        gradeCheckBoxesMap.put(Grade.TENTH, jCheckBox10th);
        gradeCheckBoxesMap.put(Grade.NINTH, jCheckBox9th);
        gradeCheckBoxesMap.put(Grade.EIGHTH, jCheckBox8th);
        gradeCheckBoxesMap.put(Grade.SEVENTH, jCheckBox7th);
        gradeCheckBoxesMap.put(Grade.SIXTH, jCheckBox6th);
        gradeCheckBoxesMap.put(Grade.FIFTH, jCheckBox5th);
        gradeCheckBoxesMap.put(Grade.FOURTH, jCheckBox4th);
        gradeCheckBoxesMap.put(Grade.THIRD, jCheckBox3rd);
        gradeCheckBoxesMap.put(Grade.SECOND, jCheckBox2nd);
        gradeCheckBoxesMap.put(Grade.FIRST, jCheckBox1st);
        gradeCheckBoxesMap.put(Grade.KINDER, jCheckBoxKinder);
        
        gradeAvailableSeatsMap = new HashMap<>();
        gradeAvailableSeatsMap.put(Grade.TWELFTH, jTextField12th);
        gradeAvailableSeatsMap.put(Grade.ELEVENTH, jTextField11th);
        gradeAvailableSeatsMap.put(Grade.TENTH, jTextField10th);
        gradeAvailableSeatsMap.put(Grade.NINTH, jTextField9th);
        gradeAvailableSeatsMap.put(Grade.EIGHTH, jTextField8th);
        gradeAvailableSeatsMap.put(Grade.SEVENTH, jTextField7th);
        gradeAvailableSeatsMap.put(Grade.SIXTH, jTextField6th);
        gradeAvailableSeatsMap.put(Grade.FIFTH, jTextField5th);
        gradeAvailableSeatsMap.put(Grade.FOURTH, jTextField4th);
        gradeAvailableSeatsMap.put(Grade.THIRD, jTextField3rd);
        gradeAvailableSeatsMap.put(Grade.SECOND, jTextField2nd);
        gradeAvailableSeatsMap.put(Grade.FIRST, jTextField1st);
        gradeAvailableSeatsMap.put(Grade.KINDER, jTextFieldKinder);
    }
    
    private void selectSourceFile() {
        Path sourceFile = Utilities.selectFile(this, jTextFieldMasterFileSource.getText());
        if (sourceFile != null) {
            jTextFieldMasterFileSource.setText(sourceFile.toString());
            loadSpreadsheet();
        }
    }
    
    private void loadSpreadsheet() {
        //getSpreadsheetData();
        gradeLotteryMap = new HashMap<>();
        
        //addToLottery(new ProspectiveStudent("Doe", "John", Tier.CHILDREN_OF_EMPLOYEES_1, "Doe1", Grade.NINTH));
        //addToLottery(new ProspectiveStudent("Dole", "Bill", Tier.SIBLINGS_IN_DISTRICT_2, "Dole1", Grade.TWELFTH));
        //addToLottery(new ProspectiveStudent("Smith", "Jane", Tier.DISTRICT_RESIDENTS_5, "Smith1", Grade.ELEVENTH));
        //addToLottery(new ProspectiveStudent("Andrews", "Sue", Tier.NEARBY_COUNTY_RESIDENTS_6, "Andrews1", Grade.TENTH));
        
        String filename = jTextFieldMasterFileSource.getText();
        
        //last name, first name, tier, grade
        int[] colValues = new int[]{2,3,4,22};
        
        try (FileInputStream fis = new FileInputStream(filename)) {
            XSSFWorkbook wb = new XSSFWorkbook(fis);
            //HSSFWorkbook wb = masterFile.readFile(masterFile);
            for (int k = 0; k < wb.getNumberOfSheets(); k++) {
                XSSFSheet sheet = wb.getSheetAt(k);
                if (!sheet.getSheetName().equals("Master List")) {
                    continue;
                }
                int rows = sheet.getPhysicalNumberOfRows();
                System.out.println("Sheet " + k + " \"" + wb.getSheetName(k) + "\" has " + rows
                                + " row(s).");
                for (int r = 0; r < rows; r++) {
                    XSSFRow row = sheet.getRow(r);
                    if (row == null) {
                        continue;
                    }

                    System.out.println("\nROW " + row.getRowNum() + " has " + row.getPhysicalNumberOfCells() + " cell(s).");
                    if (row.getCell(colValues[2]) != null
                            && row.getCell(colValues[3]) != null
                            && row.getCell(colValues[2]).getCellTypeEnum() == CellType.NUMERIC
                            && row.getCell(colValues[3]).getCellTypeEnum() == CellType.NUMERIC) {
                        addToLottery(new ProspectiveStudent(row.getCell(colValues[0]).getStringCellValue(),
                                row.getCell(colValues[1]).getStringCellValue(),
                                Tier.getTier((int) row.getCell(colValues[2]).getNumericCellValue()),
                                row.getCell(colValues[0]).getStringCellValue(),
                                Grade.getGrade((int) row.getCell(colValues[3]).getNumericCellValue())));
                    }
                    if (true == true) continue;
                    for (int c = 0; c < row.getLastCellNum(); c++) {
                        XSSFCell cell = row.getCell(c);
                        String value;

                        if (cell != null) {
                            switch (cell.getCellTypeEnum()) {

                                case FORMULA:
                                    value = "FORMULA value=" + cell.getCellFormula();
                                    break;

                                case NUMERIC:
                                    value = "NUMERIC value=" + cell.getNumericCellValue();
                                    break;

                                case STRING:
                                    value = "STRING value=" + cell.getStringCellValue();
                                    break;

                                case BLANK:
                                    value = "<BLANK>";
                                    break;

                                case BOOLEAN:
                                    value = "BOOLEAN value-" + cell.getBooleanCellValue();
                                    break;

                                case ERROR:
                                    value = "ERROR value=" + cell.getErrorCellValue();
                                    break;

                                default:
                                    value = "UNKNOWN value of type " + cell.getCellType();
                            }
                            System.out.println("CELL col=" + cell.getColumnIndex() + " VALUE="
                                            + value);
                        }
                    }
                }
            }
            rePopulateProspectiveStudents();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
    }
    
    private boolean isGradeChecked(Grade grade) {
        JCheckBox tempCheckBox = gradeCheckBoxesMap.get(grade);
        return tempCheckBox.isSelected();
    }
    
    private void jCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {                                              
        rePopulateProspectiveStudents();
    } 
    
    private void rePopulateProspectiveStudents() {
        //Need to know how many columns to show...
        dbRecordCellList = new ArrayList<>();
        JTableProspectiveStudents prospectiveStudentsTable;
        Object[][] tableItems = new Object[1][7];
        prospectiveStudentsTable = new JTableProspectiveStudents();
        prospectiveStudentsTable.setTableHeaderRow(headerCols);
        
        int rowCounter = 0;
        for (Map.Entry<Grade, Lottery> entry : gradeLotteryMap.entrySet()) {
            Grade grade = entry.getKey();
            if (!isGradeChecked(grade)) {
                continue;
            }
            Lottery value = entry.getValue();
            Map<Tier, List<ProspectiveStudent>> prospectiveStudentsTierMap = value.getTierPS_List();
            for (Tier tier : Tier.values()) {
                if (prospectiveStudentsTierMap.get(tier) == null) continue;
                for (ProspectiveStudent prospectiveStudent : prospectiveStudentsTierMap.get(tier)) { // value.getStudentsByTier(tier)) {
                    int colCounter = 0;
                    DB_RecordCell tempCell = new DB_RecordCell(String.valueOf(prospectiveStudent.getLotteryDrawNumber()), rowCounter, colCounter);
                    dbRecordCellList.add(tempCell);
                    //tableItems[rowCounter][colCounter++] = tempCell;
                    tempCell = new DB_RecordCell(prospectiveStudent.getLastName(), rowCounter, colCounter++);
                    dbRecordCellList.add(tempCell);
                    //tableItems[rowCounter][colCounter++] = tempCell;
                    tempCell = new DB_RecordCell(prospectiveStudent.getFirstName(), rowCounter, colCounter++);
                    dbRecordCellList.add(tempCell);
                    //tableItems[rowCounter][colCounter++] = tempCell;
                    tempCell = new DB_RecordCell(Tier.getNumberStr(prospectiveStudent.getTier()), rowCounter, colCounter++);
                    dbRecordCellList.add(tempCell);
                    //tableItems[rowCounter][colCounter++] = tempCell;
                    tempCell = new DB_RecordCell(Grade.getNumberStr(prospectiveStudent.getGrade()), rowCounter, colCounter++);
                    dbRecordCellList.add(tempCell);
                    //tableItems[rowCounter][colCounter++] = tempCell;
                    tempCell = new DB_RecordCell(prospectiveStudent.getFamilyKey(), rowCounter, colCounter++);
                    dbRecordCellList.add(tempCell);
                    //tableItems[rowCounter][colCounter++] = tempCell;
                    tempCell = new DB_RecordCell(String.valueOf(prospectiveStudent.getSiblingsOnWaitlist().size()), rowCounter, colCounter++);
                    dbRecordCellList.add(tempCell);
                    //tableItems[rowCounter][colCounter++] = tempCell;
                    rowCounter ++;
                }
            }
        }
        
//        int totalCells = dbRecordCellList.size();
//        int totalRows = totalCells / 7;
        
        tableItems = new Object[rowCounter][7];
        
        rowCounter = 0;
        int colCounter = 0;
        for (DB_RecordCell dB_RecordCell : dbRecordCellList) {
            tableItems[rowCounter][colCounter++] = dB_RecordCell;
            if (colCounter > 6) {
                rowCounter ++;
                colCounter = 0;
            }
        }
        
        prospectiveStudentsTable.setProspectiveStudents(tableItems);
        prospectiveStudentsTable.setTableHeaderRow(headerCols);
        prospectiveStudentsTable.initTable();
        prospectiveStudentsTable.addActionListener(this);
        jScrollPaneProspectiveStudents.setViewportView(prospectiveStudentsTable);
        pack();
        updateDB_Search();
    }
    
    private void addToLottery(ProspectiveStudent ps) {
        if (ps == null) return;
        Grade grade = ps.getGrade();
        Lottery tempLottery = gradeLotteryMap.get(grade);
        String availableSeats = gradeAvailableSeatsMap.get(grade).getText().trim();
        if (tempLottery == null) {
        int numSeats = 0;
            if (availableSeats != null) {
                try {
                    numSeats = Integer.parseInt(availableSeats);
                } catch (Exception ex) {
                    numSeats = 0;
                    gradeAvailableSeatsMap.get(grade).setText("0");
                    JOptionPane.showMessageDialog(this, "The available seats for the " + grade.name() + " grade is not a number", "Invalid Seats Value", JOptionPane.WARNING_MESSAGE);
                }
            }
            tempLottery = new Lottery(grade, numSeats);
            gradeLotteryMap.put(grade, tempLottery);
        }
        List<ProspectiveStudent> tierList = tempLottery.getTierPS_List().get(ps.getTier());
        if (tierList == null) {
            tierList = new ArrayList<>();
            tempLottery.getTierPS_List().put(ps.getTier(), tierList);
        }
        tierList.add(ps);
    }

    /**
     * Updates the search pattern based on the search text for the EEPROM Database programmed
     * data table.  Uses 'Pattern' and 'Matcher' so the start and end of the match can be highlighted.
     */
    private void updateDB_Search() {
        String searchValue = jTextFieldFilterStudents.getText();
        Pattern searchPattern = null;
        try {
            searchPattern = Pattern.compile(searchValue, Pattern.CASE_INSENSITIVE);
        } catch (PatternSyntaxException ex) {
            //ignore
        }
        Matcher searchMatcher = null;
        for (DB_RecordCell cellObj : dbRecordCellList) {
            if (cellObj.getValue() == null) {
                continue;
            }
            searchMatcher = searchPattern.matcher(cellObj.getValue());
            if (searchMatcher.find()) {
                cellObj.setSearchMatch(true);
                cellObj.setSearchStart(searchMatcher.start());
                cellObj.setSearchEnd(searchMatcher.end());
            } else {
                cellObj.setSearchMatch(false);
            }
        }
        //Now only show those rows in the table where a match exists
        JTableProspectiveStudents prospectiveStudentsTable = getProspectiveStudentsTable();
        if (prospectiveStudentsTable != null) {
            prospectiveStudentsTable.applyFilter(searchValue, false);
            jLabelNumRecords.setText(String.valueOf(prospectiveStudentsTable.numRowsViewable()));
        }
    }
    
    private JTableProspectiveStudents getProspectiveStudentsTable() {
        Component tableComp = jScrollPaneProspectiveStudents.getViewport().getView();
        if (tableComp instanceof JTableProspectiveStudents) {
            return (JTableProspectiveStudents) tableComp;
        }
        return null;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
}
