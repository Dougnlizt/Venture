/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.tjcs.venture;

import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.tjcs.venture.Utilities.Columns;
import org.tjcs.venture.Utilities.ColumnsExport;
import org.tjcs.venture.Utilities.Grade;
import org.tjcs.venture.Utilities.Tier;

/**
 *
 * @author dougthompson
 */
public class LotteryFrame extends javax.swing.JFrame implements ActionListener {

    /**
     * Creates new form LotteryFrame
     */
    public LotteryFrame() {
        initComponents();
        initMyComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButtonBrowseForDestination = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldMasterFileSource = new javax.swing.JTextField();
        jTextFieldDestination = new javax.swing.JTextField();
        jButtonBrowseForMasterFile = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButtonImport = new javax.swing.JButton();
        jButtonExport = new javax.swing.JButton();
        jButtonImportSettings = new javax.swing.JButton();
        jLabelImportIssues = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabelSelectAllGrades = new javax.swing.JLabel();
        jLabelClearAllGrades = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jCheckBox12th = new javax.swing.JCheckBox();
        jLabel20 = new javax.swing.JLabel();
        jCheckBox11th = new javax.swing.JCheckBox();
        jTextField12th = new javax.swing.JTextField();
        jTextField11th = new javax.swing.JTextField();
        jTextField10th = new javax.swing.JTextField();
        jTextField9th = new javax.swing.JTextField();
        jTextField8th = new javax.swing.JTextField();
        jTextField7th = new javax.swing.JTextField();
        jTextField6th = new javax.swing.JTextField();
        jTextField5th = new javax.swing.JTextField();
        jTextField4th = new javax.swing.JTextField();
        jCheckBox10th = new javax.swing.JCheckBox();
        jCheckBox9th = new javax.swing.JCheckBox();
        jCheckBox8th = new javax.swing.JCheckBox();
        jCheckBox7th = new javax.swing.JCheckBox();
        jCheckBox6th = new javax.swing.JCheckBox();
        jCheckBox5th = new javax.swing.JCheckBox();
        jCheckBox4th = new javax.swing.JCheckBox();
        jTextField3rd = new javax.swing.JTextField();
        jTextField2nd = new javax.swing.JTextField();
        jTextField1st = new javax.swing.JTextField();
        jTextFieldKinder = new javax.swing.JTextField();
        jCheckBox3rd = new javax.swing.JCheckBox();
        jCheckBox2nd = new javax.swing.JCheckBox();
        jCheckBox1st = new javax.swing.JCheckBox();
        jCheckBoxKinder = new javax.swing.JCheckBox();
        jButtonStartLottery = new javax.swing.JButton();
        jScrollPaneProspectiveStudents = new javax.swing.JScrollPane();
        jTablePropsectiveStudents = new javax.swing.JTable();
        jTextFieldFilterStudents = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabelNumRecords = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonBrowseForDestination.setText("Browse");
        jButtonBrowseForDestination.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseForDestinationActionPerformed(evt);
            }
        });

        jLabel1.setText("Master File");

        jButtonBrowseForMasterFile.setText("Browse");
        jButtonBrowseForMasterFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseForMasterFileActionPerformed(evt);
            }
        });

        jLabel2.setText("Output");

        jButtonImport.setText("Import");
        jButtonImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImportActionPerformed(evt);
            }
        });

        jButtonExport.setText("Export");
        jButtonExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportActionPerformed(evt);
            }
        });

        jButtonImportSettings.setText("...");
        jButtonImportSettings.setToolTipText("Modify Import Settings"); // NOI18N
        jButtonImportSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImportSettingsActionPerformed(evt);
            }
        });

        jLabelImportIssues.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabelImportIssues.setForeground(new java.awt.Color(255, 0, 51));
        jLabelImportIssues.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelImportIssues.setText("!");
        jLabelImportIssues.setToolTipText("Click to view import issues"); // NOI18N
        jLabelImportIssues.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelImportIssuesMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabelImportIssuesMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabelImportIssuesMouseEntered(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldDestination, javax.swing.GroupLayout.DEFAULT_SIZE, 655, Short.MAX_VALUE)
                    .addComponent(jTextFieldMasterFileSource))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonBrowseForMasterFile, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBrowseForDestination, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonImportSettings, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonImport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonExport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelImportIssues, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldMasterFileSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBrowseForMasterFile)
                    .addComponent(jButtonImport)
                    .addComponent(jButtonImportSettings)
                    .addComponent(jLabelImportIssues, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldDestination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBrowseForDestination)
                    .addComponent(jLabel2)
                    .addComponent(jButtonExport))
                .addContainerGap())
        );

        jPanel2.setSize(new java.awt.Dimension(100, 10));

        jLabelSelectAllGrades.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabelSelectAllGrades.setForeground(new java.awt.Color(0, 51, 255));
        jLabelSelectAllGrades.setText("<html><u>Select All</u></html>"); // NOI18N
        jLabelSelectAllGrades.setToolTipText("Select every grade"); // NOI18N
        jLabelSelectAllGrades.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelSelectAllGradesMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabelSelectAllGradesMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabelSelectAllGradesMouseEntered(evt);
            }
        });

        jLabelClearAllGrades.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabelClearAllGrades.setForeground(new java.awt.Color(0, 51, 255));
        jLabelClearAllGrades.setText("<html><u>Clear All</u></html>"); // NOI18N
        jLabelClearAllGrades.setToolTipText("Clear all selected grades"); // NOI18N
        jLabelClearAllGrades.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelClearAllGradesMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabelClearAllGradesMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabelClearAllGradesMouseEntered(evt);
            }
        });

        jLabel6.setText("Grade");

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("12th");
        jLabel7.setOpaque(true);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("11th");

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("10th");

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("9th");

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("8th");

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("7th");

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("6th");

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("5th");

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("4th");

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("3rd");

        jLabel16.setText("2nd");

        jLabel17.setText("1st");

        jLabel18.setText("Kinder");

        jLabel19.setText("Select");

        jCheckBox12th.setSelected(true);
        jCheckBox12th.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxActionPerformed(evt);
            }
        });

        jLabel20.setText("Available Seats");

        jCheckBox11th.setSelected(true);
        jCheckBox11th.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxActionPerformed(evt);
            }
        });

        jTextField12th.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField12th.setText("0");
        jTextField12th.setPreferredSize(new java.awt.Dimension(5, 28));
        jTextField12th.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldAvailableSeatsFocusLost(evt);
            }
        });

        jTextField11th.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField11th.setText("0");
        jTextField11th.setPreferredSize(new java.awt.Dimension(5, 28));
        jTextField11th.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldAvailableSeatsFocusLost(evt);
            }
        });

        jTextField10th.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField10th.setText("0");
        jTextField10th.setPreferredSize(new java.awt.Dimension(5, 28));
        jTextField10th.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldAvailableSeatsFocusLost(evt);
            }
        });

        jTextField9th.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField9th.setText("0");
        jTextField9th.setPreferredSize(new java.awt.Dimension(5, 28));
        jTextField9th.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldAvailableSeatsFocusLost(evt);
            }
        });

        jTextField8th.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField8th.setText("0");
        jTextField8th.setPreferredSize(new java.awt.Dimension(5, 28));
        jTextField8th.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldAvailableSeatsFocusLost(evt);
            }
        });

        jTextField7th.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField7th.setText("0");
        jTextField7th.setPreferredSize(new java.awt.Dimension(5, 28));
        jTextField7th.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldAvailableSeatsFocusLost(evt);
            }
        });

        jTextField6th.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField6th.setText("0");
        jTextField6th.setPreferredSize(new java.awt.Dimension(5, 28));
        jTextField6th.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldAvailableSeatsFocusLost(evt);
            }
        });

        jTextField5th.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField5th.setText("0");
        jTextField5th.setPreferredSize(new java.awt.Dimension(5, 28));
        jTextField5th.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldAvailableSeatsFocusLost(evt);
            }
        });

        jTextField4th.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField4th.setText("0");
        jTextField4th.setPreferredSize(new java.awt.Dimension(5, 28));
        jTextField4th.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldAvailableSeatsFocusLost(evt);
            }
        });

        jCheckBox10th.setSelected(true);
        jCheckBox10th.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxActionPerformed(evt);
            }
        });

        jCheckBox9th.setSelected(true);
        jCheckBox9th.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxActionPerformed(evt);
            }
        });

        jCheckBox8th.setSelected(true);
        jCheckBox8th.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxActionPerformed(evt);
            }
        });

        jCheckBox7th.setSelected(true);
        jCheckBox7th.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxActionPerformed(evt);
            }
        });

        jCheckBox6th.setSelected(true);
        jCheckBox6th.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxActionPerformed(evt);
            }
        });

        jCheckBox5th.setSelected(true);
        jCheckBox5th.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxActionPerformed(evt);
            }
        });

        jCheckBox4th.setSelected(true);
        jCheckBox4th.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxActionPerformed(evt);
            }
        });

        jTextField3rd.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField3rd.setText("0");
        jTextField3rd.setPreferredSize(new java.awt.Dimension(5, 28));
        jTextField3rd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldAvailableSeatsFocusLost(evt);
            }
        });

        jTextField2nd.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField2nd.setText("0");
        jTextField2nd.setPreferredSize(new java.awt.Dimension(5, 28));
        jTextField2nd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldAvailableSeatsFocusLost(evt);
            }
        });

        jTextField1st.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1st.setText("0");
        jTextField1st.setPreferredSize(new java.awt.Dimension(5, 28));
        jTextField1st.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldAvailableSeatsFocusLost(evt);
            }
        });

        jTextFieldKinder.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldKinder.setText("0");
        jTextFieldKinder.setPreferredSize(new java.awt.Dimension(5, 28));
        jTextFieldKinder.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldAvailableSeatsFocusLost(evt);
            }
        });

        jCheckBox3rd.setSelected(true);
        jCheckBox3rd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxActionPerformed(evt);
            }
        });

        jCheckBox2nd.setSelected(true);
        jCheckBox2nd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxActionPerformed(evt);
            }
        });

        jCheckBox1st.setSelected(true);
        jCheckBox1st.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxActionPerformed(evt);
            }
        });

        jCheckBoxKinder.setSelected(true);
        jCheckBoxKinder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxActionPerformed(evt);
            }
        });

        jButtonStartLottery.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jButtonStartLottery.setForeground(new java.awt.Color(0, 153, 51));
        jButtonStartLottery.setText("<html><center>Start<br/>Lottery</center></html>"); // NOI18N
        jButtonStartLottery.setMaximumSize(new java.awt.Dimension(108, 52));
        jButtonStartLottery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartLotteryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel7)
                    .addComponent(jCheckBox12th)
                    .addComponent(jTextField12th, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel5)
                    .addComponent(jCheckBox11th)
                    .addComponent(jTextField11th, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel8)
                    .addComponent(jCheckBox10th)
                    .addComponent(jTextField10th, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel9)
                    .addComponent(jCheckBox9th)
                    .addComponent(jTextField9th, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel10)
                    .addComponent(jCheckBox8th)
                    .addComponent(jTextField8th, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel11)
                    .addComponent(jCheckBox7th)
                    .addComponent(jTextField7th, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel12)
                    .addComponent(jCheckBox6th)
                    .addComponent(jTextField6th, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jTextField5th, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox5th)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jTextField4th, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox4th)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jTextField3rd, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox3rd)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jTextField2nd, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox2nd)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jTextField1st, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox1st)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jTextFieldKinder, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxKinder)
                    .addComponent(jLabel18))
                .addGap(11, 11, 11)
                .addComponent(jButtonStartLottery, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox12th, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField12th, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCheckBox10th, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCheckBox9th, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCheckBox8th, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCheckBox7th, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCheckBox6th, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCheckBox5th, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCheckBox4th, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCheckBox3rd, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCheckBox2nd, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCheckBox1st, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCheckBoxKinder, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField6th, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextField11th, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextField10th, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextField9th, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextField8th, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextField7th, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextField5th, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextField4th, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextField3rd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextField2nd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextField1st, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextFieldKinder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jCheckBox11th, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButtonStartLottery, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jTablePropsectiveStudents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Lottery Draw", "Last Name", "First Name", "Tier", "Grade", "Family Key", "Wait List Siblings"
            }
        ));
        jScrollPaneProspectiveStudents.setViewportView(jTablePropsectiveStudents);

        jTextFieldFilterStudents.setToolTipText("");
        jTextFieldFilterStudents.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldFilterStudentsKeyReleased(evt);
            }
        });

        jLabel21.setText("Search Prospective Students:");

        jLabel22.setText("Number of Prospective Students:");

        jLabelNumRecords.setText("N/A");
        jLabelNumRecords.setToolTipText("");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPaneProspectiveStudents)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelNumRecords, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldFilterStudents, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(jLabelSelectAllGrades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelClearAllGrades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSelectAllGrades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelClearAllGrades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldFilterStudents, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21)
                    .addComponent(jLabel22)
                    .addComponent(jLabelNumRecords))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneProspectiveStudents, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonBrowseForMasterFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseForMasterFileActionPerformed
        selectSourceFile();
    }//GEN-LAST:event_jButtonBrowseForMasterFileActionPerformed

    private void jButtonImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImportActionPerformed
        continueLoad = true;
        loadSpreadsheet();
    }//GEN-LAST:event_jButtonImportActionPerformed

    private void jLabelSelectAllGradesMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelSelectAllGradesMouseEntered
        jLabelSelectAllGrades.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_jLabelSelectAllGradesMouseEntered

    private void jLabelSelectAllGradesMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelSelectAllGradesMouseExited
        jLabelSelectAllGrades.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_jLabelSelectAllGradesMouseExited

    private void jLabelSelectAllGradesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelSelectAllGradesMouseClicked
        jLabelClearAllGrades.setCursor(new Cursor(Cursor.WAIT_CURSOR));
        for (Map.Entry<Grade, JCheckBox> entry : gradeCheckBoxesMap.entrySet()) {
            JCheckBox value = entry.getValue();
            value.setSelected(true);
        }
        saveSettings();
        rePopulateProspectiveStudents();
        jLabelClearAllGrades.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_jLabelSelectAllGradesMouseClicked

    private void jLabelClearAllGradesMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelClearAllGradesMouseEntered
        jLabelClearAllGrades.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_jLabelClearAllGradesMouseEntered

    private void jLabelClearAllGradesMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelClearAllGradesMouseExited
        jLabelClearAllGrades.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_jLabelClearAllGradesMouseExited

    private void jLabelClearAllGradesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelClearAllGradesMouseClicked
        jLabelClearAllGrades.setCursor(new Cursor(Cursor.WAIT_CURSOR));
        for (Map.Entry<Grade, JCheckBox> entry : gradeCheckBoxesMap.entrySet()) {
            JCheckBox value = entry.getValue();
            value.setSelected(false);
        }
        saveSettings();
        rePopulateProspectiveStudents();
        jLabelClearAllGrades.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_jLabelClearAllGradesMouseClicked

    private void jTextFieldFilterStudentsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldFilterStudentsKeyReleased
        updateDB_Search();
    }//GEN-LAST:event_jTextFieldFilterStudentsKeyReleased

    private void jButtonImportSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImportSettingsActionPerformed
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        setImportSettings();
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_jButtonImportSettingsActionPerformed

    private void jLabelImportIssuesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelImportIssuesMouseClicked
        showProblemRows();
    }//GEN-LAST:event_jLabelImportIssuesMouseClicked

    private void jLabelImportIssuesMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelImportIssuesMouseEntered
        this.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_jLabelImportIssuesMouseEntered

    private void jLabelImportIssuesMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelImportIssuesMouseExited
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_jLabelImportIssuesMouseExited

    private void jButtonStartLotteryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartLotteryActionPerformed
        runLottery();
    }//GEN-LAST:event_jButtonStartLotteryActionPerformed

    private void jButtonExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportActionPerformed
        exportLotteryData();
    }//GEN-LAST:event_jButtonExportActionPerformed

    private void jButtonBrowseForDestinationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseForDestinationActionPerformed
        selectDestinationDir();
    }//GEN-LAST:event_jButtonBrowseForDestinationActionPerformed

    /**
     * @param args the command line argument
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LotteryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LotteryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LotteryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LotteryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                LotteryFrame lotteryFrame = new LotteryFrame();
                lotteryFrame.setLocationRelativeTo(null);
                lotteryFrame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBrowseForDestination;
    private javax.swing.JButton jButtonBrowseForMasterFile;
    private javax.swing.JButton jButtonExport;
    private javax.swing.JButton jButtonImport;
    private javax.swing.JButton jButtonImportSettings;
    private javax.swing.JButton jButtonStartLottery;
    private javax.swing.JCheckBox jCheckBox10th;
    private javax.swing.JCheckBox jCheckBox11th;
    private javax.swing.JCheckBox jCheckBox12th;
    private javax.swing.JCheckBox jCheckBox1st;
    private javax.swing.JCheckBox jCheckBox2nd;
    private javax.swing.JCheckBox jCheckBox3rd;
    private javax.swing.JCheckBox jCheckBox4th;
    private javax.swing.JCheckBox jCheckBox5th;
    private javax.swing.JCheckBox jCheckBox6th;
    private javax.swing.JCheckBox jCheckBox7th;
    private javax.swing.JCheckBox jCheckBox8th;
    private javax.swing.JCheckBox jCheckBox9th;
    private javax.swing.JCheckBox jCheckBoxKinder;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelClearAllGrades;
    private javax.swing.JLabel jLabelImportIssues;
    private javax.swing.JLabel jLabelNumRecords;
    private javax.swing.JLabel jLabelSelectAllGrades;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPaneProspectiveStudents;
    private javax.swing.JTable jTablePropsectiveStudents;
    private javax.swing.JTextField jTextField10th;
    private javax.swing.JTextField jTextField11th;
    private javax.swing.JTextField jTextField12th;
    private javax.swing.JTextField jTextField1st;
    private javax.swing.JTextField jTextField2nd;
    private javax.swing.JTextField jTextField3rd;
    private javax.swing.JTextField jTextField4th;
    private javax.swing.JTextField jTextField5th;
    private javax.swing.JTextField jTextField6th;
    private javax.swing.JTextField jTextField7th;
    private javax.swing.JTextField jTextField8th;
    private javax.swing.JTextField jTextField9th;
    private javax.swing.JTextField jTextFieldDestination;
    private javax.swing.JTextField jTextFieldFilterStudents;
    private javax.swing.JTextField jTextFieldKinder;
    private javax.swing.JTextField jTextFieldMasterFileSource;
    // End of variables declaration//GEN-END:variables

    private final String homeDir = System.getProperty("user.home");
    private final String appName = "Venture";
    private final String toolSettingsFileName = "ventureSettings.txt";
    private final static String PROGRAM_NAME = "Venture";
    private final static String PROGRAM_VERSION = "1.0.0";
    private final static String SOURCE_LOCATION_DESC = "Source Location";
    private final static String COLUMN_ASSIGNMENT = "Column Assignment";
    private final static String DESTINATION_LOCATION_DESC = "Destination Location";
    private final static String GRADES_CHECKED = "Grades Checked";
    private final static String GRADES_OPEN_SEATS = "Grades Open Seats";
    private final static String SPREADSHEET_COLUMNS = "Spreadsheet Columns";
    private List<DB_RecordCell> dbRecordCellList;
    private List<Lottery> lotteryList;
    private Map<Grade, Lottery> gradeLotteryMap = new HashMap<>();
    //private final String[] headerCols = {"Lottery Draw", "Last Name", "First Name", "Tier", "Grade", "Family Key", "Wait List Siblings"};
    private Map<Grade, JCheckBox> gradeCheckBoxesMap;
    private Map<Grade, JTextField> gradeAvailableSeatsMap;
    private boolean continueLoad = false;
    private ImageIcon lotteryIcon = new ImageIcon(getClass().getClassLoader().getResource("images/lottery.png"));
    private long timeStamp = System.currentTimeMillis();
    private List<XSSFRow> problemRows;
    public final static DateFormat DATE_ONLY_FORMAT = new SimpleDateFormat("MM/dd/yyyy");
    public final static DateFormat DATE_AND_TIME_FORMAT = new SimpleDateFormat("MM/dd/yyyy h:mm a");
    private double progress = 0.0;
    
    /**
     * Need to provide credits for the icon:
     * Icon made by Freepik from www.flaticon.com
     */
    
    private void initMyComponents() {
        setTitle(PROGRAM_NAME + " " + PROGRAM_VERSION);
        setIconImage(lotteryIcon.getImage());
        jLabelImportIssues.setVisible(false);

        dbRecordCellList = new ArrayList<>();
        lotteryList = new ArrayList<>();
        
        gradeCheckBoxesMap = new HashMap<>();
        gradeCheckBoxesMap.put(Grade.TWELFTH, jCheckBox12th);
        gradeCheckBoxesMap.put(Grade.ELEVENTH, jCheckBox11th);
        gradeCheckBoxesMap.put(Grade.TENTH, jCheckBox10th);
        gradeCheckBoxesMap.put(Grade.NINTH, jCheckBox9th);
        gradeCheckBoxesMap.put(Grade.EIGHTH, jCheckBox8th);
        gradeCheckBoxesMap.put(Grade.SEVENTH, jCheckBox7th);
        gradeCheckBoxesMap.put(Grade.SIXTH, jCheckBox6th);
        gradeCheckBoxesMap.put(Grade.FIFTH, jCheckBox5th);
        gradeCheckBoxesMap.put(Grade.FOURTH, jCheckBox4th);
        gradeCheckBoxesMap.put(Grade.THIRD, jCheckBox3rd);
        gradeCheckBoxesMap.put(Grade.SECOND, jCheckBox2nd);
        gradeCheckBoxesMap.put(Grade.FIRST, jCheckBox1st);
        gradeCheckBoxesMap.put(Grade.KINDER, jCheckBoxKinder);
        
        gradeAvailableSeatsMap = new HashMap<>();
        gradeAvailableSeatsMap.put(Grade.TWELFTH, jTextField12th);
        gradeAvailableSeatsMap.put(Grade.ELEVENTH, jTextField11th);
        gradeAvailableSeatsMap.put(Grade.TENTH, jTextField10th);
        gradeAvailableSeatsMap.put(Grade.NINTH, jTextField9th);
        gradeAvailableSeatsMap.put(Grade.EIGHTH, jTextField8th);
        gradeAvailableSeatsMap.put(Grade.SEVENTH, jTextField7th);
        gradeAvailableSeatsMap.put(Grade.SIXTH, jTextField6th);
        gradeAvailableSeatsMap.put(Grade.FIFTH, jTextField5th);
        gradeAvailableSeatsMap.put(Grade.FOURTH, jTextField4th);
        gradeAvailableSeatsMap.put(Grade.THIRD, jTextField3rd);
        gradeAvailableSeatsMap.put(Grade.SECOND, jTextField2nd);
        gradeAvailableSeatsMap.put(Grade.FIRST, jTextField1st);
        gradeAvailableSeatsMap.put(Grade.KINDER, jTextFieldKinder);
        
        loadSettings();
        
        rePopulateProspectiveStudents();
        
        jButtonStartLottery.setEnabled(false);
        jButtonExport.setEnabled(false);
    }
    
    private void selectSourceFile() {
        Path sourceFile = Utilities.selectFile(this, jTextFieldMasterFileSource.getText());
        if (sourceFile != null) {
            jTextFieldMasterFileSource.setText(sourceFile.toString());
            saveSettings();
        }
    }

    private void selectDestinationDir() {
        Path destinationDir = Utilities.selectDir(this, jTextFieldDestination.getText());
        if (destinationDir != null) {
            jTextFieldDestination.setText(destinationDir.toString());
            saveSettings();
        }
    }

    public void setContinueLoad(boolean continueLoad) {
        this.continueLoad = continueLoad;
    }
    
    private void setImportSettings() {
        SpreadsheetImport importSettings = new SpreadsheetImport(this, true);
        importSettings.setLocationRelativeTo(this);
//        importSettings.addWindowListener(new WindowAdapter() {
//            @Override
//            public void windowClosed(WindowEvent e) {
//                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
//            }
//        });
        importSettings.setVisible(true);
    }
    
    private void showProblemRows() {
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        ImportIssuesDialog importIssuesDialog = new ImportIssuesDialog(this, true);
        importIssuesDialog.setLocationRelativeTo(this);
        importIssuesDialog.setProblemRows(problemRows);
        importIssuesDialog.buildTable();
        importIssuesDialog.setVisible(true);
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }
    
    private void loadSpreadsheet() {
        //getSpreadsheetData();
        jLabelImportIssues.setVisible(false);
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        gradeLotteryMap = new TreeMap<>();
        List<XSSFRow> validRows = new ArrayList<>();
        problemRows = new ArrayList<>();
        
        String filename = jTextFieldMasterFileSource.getText();
        
        if (filename == null
                || filename.isEmpty()
                || !Paths.get(filename).toFile().exists()) {
            this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            JOptionPane.showMessageDialog(this, "The source filename is either invalid or does not exist", "Invalid file", JOptionPane.ERROR_MESSAGE);
            return;
        }
                
        int lastNameColIndex = Columns.getColumnIndex(Columns.LAST_NAME);
        int firstNameColIndex = Columns.getColumnIndex(Columns.FIRST_NAME);
        int tierColIndex = Columns.getColumnIndex(Columns.TIER);
        int gradeColIndex = Columns.getColumnIndex(Columns.GRADE);
        int familyKeyColIndex = Columns.getColumnIndex(Columns.LAST_NAME);
        
        try (FileInputStream fis = new FileInputStream(filename)) {
            XSSFWorkbook wb = new XSSFWorkbook(fis);
            //HSSFWorkbook wb = masterFile.readFile(masterFile);
            for (int k = 0; k < wb.getNumberOfSheets(); k++) {
                XSSFSheet sheet = wb.getSheetAt(k);
                if (!sheet.getSheetName().equals("Master List")) {
                    continue;
                }
                int rows = sheet.getPhysicalNumberOfRows();
                System.out.println("Sheet " + k + " \"" + wb.getSheetName(k) + "\" has " + rows
                                + " row(s).");
                for (int r = 0; r < rows; r++) {
                    XSSFRow row = sheet.getRow(r);
                    if (row == null) {
                        continue;
                    }

                    //System.out.println("\nROW " + row.getRowNum() + " has " + row.getPhysicalNumberOfCells() + " cell(s).");

                    //If the last name field is blank or it is equal to 'Last_Name', ignore this row
                    XSSFCell lastNameCol = row.getCell(lastNameColIndex);
                    if (lastNameCol == null
                            || lastNameCol.getCellTypeEnum() != CellType.STRING
                            || lastNameCol.getCellTypeEnum() == CellType.BLANK
                            || lastNameCol.getStringCellValue().equals("Last_Name")
                            || lastNameCol.getStringCellValue().startsWith("the above names have been")) {
                        continue;
                    }

                    //If the tier and grade are both null, then add this line to the 'problem' list
                    XSSFCell tierCol = row.getCell(tierColIndex);
                    XSSFCell gradeCol = row.getCell(gradeColIndex);
                    boolean tierColIsNumeric = false;
                    boolean gradeColIsNumeric = false;
                    if (tierCol == null && gradeCol == null) {
                        problemRows.add(row);
                        continue;
                    }
                    
                    if (tierCol != null) tierColIsNumeric = tierCol.getCellTypeEnum() == CellType.NUMERIC;
                    if (gradeCol != null) gradeColIsNumeric = gradeCol.getCellTypeEnum() == CellType.NUMERIC;
                    if (tierColIsNumeric && gradeColIsNumeric) {
                        validRows.add(row);
                    } else {
                        problemRows.add(row);
                    }
                }
                for (XSSFRow row : validRows) {
                    addToLottery(new ProspectiveStudent(row, row.getCell(lastNameColIndex).getStringCellValue(),
                                row.getCell(firstNameColIndex).getStringCellValue(),
                                Tier.getTier((int) row.getCell(tierColIndex).getNumericCellValue()),
                                row.getCell(familyKeyColIndex).getStringCellValue(),
                                Grade.getGrade((int) row.getCell(gradeColIndex).getNumericCellValue())));
                }
                //Need to set the siblings based on the family key
                List<ProspectiveStudent> tempList = new ArrayList<>();
                for (Map.Entry<Grade, Lottery> entry : gradeLotteryMap.entrySet()) {
                    Grade grade = entry.getKey();
                    grade.setLotteryComplete(false);
                    Lottery value = entry.getValue();
                    Map<Tier, List<ProspectiveStudent>> prospectiveStudentsTierMap = value.getTierPS_List();
                    for (Tier tier : Tier.values()) {
                        if (prospectiveStudentsTierMap.get(tier) == null) continue;
                        tempList.addAll(prospectiveStudentsTierMap.get(tier));
                    }
                }
                for (ProspectiveStudent prospectiveStudent : tempList) {
                    if (prospectiveStudent.getFamilyKey() == null) {
                        continue;
                    }
                    for (ProspectiveStudent potentialSibling : tempList) {
                        if (prospectiveStudent == potentialSibling) {
                            continue;
                        }
                        if (potentialSibling.getFamilyKey().equalsIgnoreCase(prospectiveStudent.getFamilyKey())) {
                            prospectiveStudent.getSiblingsOnWaitlist().add(potentialSibling);
                        }
                    }
                }
                break;
            }
            updateCheckboxBackgrounds();
            rePopulateProspectiveStudents();
            this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            jButtonStartLottery.setEnabled(true);
            jButtonExport.setEnabled(false);
        } catch (Exception ex) {
            this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            JOptionPane.showMessageDialog(this, "Problem loading the file:  " + ex.getMessage(), 
                    "Issue Loading Master File", JOptionPane.ERROR_MESSAGE);
        }
        if (!problemRows.isEmpty()) {
            jLabelImportIssues.setVisible(true);
            showProblemRows();
        }
    }
    
    private void exportLotteryData() {
        //If there are any grades where the lottery didn't run, show that as a warning before continuing.
        int continueAnyway = -1;
        
        for (Map.Entry<Grade, Lottery> entry : gradeLotteryMap.entrySet()) {
            Grade key = entry.getKey();
            Lottery value = entry.getValue();
            if (!key.isLotteryComplete()) {
                continueAnyway = JOptionPane.showConfirmDialog(this, "Not all grades have had the lottery done.  Export anyway??", "Incomplete Lottery", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                if (continueAnyway != JOptionPane.YES_OPTION) {
                    return;
                }
            }
        }
        
        DateTimeFormatter dtFormatter = DateTimeFormatter.ofPattern("yyyy_MM_dd");
        String fileName = dtFormatter.format(LocalDateTime.now()) + " Lottery Results.xlsx";
        String dirLocation = jTextFieldDestination.getText();
        if (dirLocation != null) {
            fileName = dirLocation + "/" + fileName;
        }
        File file = new File(fileName);
        if (file.exists()) {
            continueAnyway = JOptionPane.showConfirmDialog(this, "The destination file \n\n" + fileName + "\n\nalready exists.  Do you want to overwrite it?", "Export File Exists", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
            if (continueAnyway != JOptionPane.YES_OPTION) {
                return;
            }
        } else if (!file.getParentFile().canWrite()) {
            JOptionPane.showMessageDialog(this, "The file destination is write protected... unable to generate output.\n\nSelect a different location"
                    + " or make the location writeable.", "Output Write Protected", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try {
            Workbook wb = new XSSFWorkbook();
            CellStyle cellDateStyleDateTime = wb.createCellStyle();
            CellStyle cellDateStyleDate = wb.createCellStyle();
            CreationHelper createHelper = wb.getCreationHelper();
            cellDateStyleDateTime.setDataFormat(createHelper.createDataFormat().getFormat("M/d/yyyy h:mm AM/PM"));
            cellDateStyleDate.setDataFormat(createHelper.createDataFormat().getFormat("M/d/yyyy"));

            Sheet sheet;
            Row row;
            sheet = wb.createSheet("Lottery Summary");
            int rowCounter = 0;
            row = sheet.createRow(rowCounter++);
            row.createCell(0).setCellValue("Created By: TJCS '" + PROGRAM_NAME + "' Lottery Tool, Version " + PROGRAM_VERSION);

            //String dateCreated = convertDateToString(LocalDateTime.now(), true);
            row = sheet.createRow(rowCounter++);
            setDateCell(row.createCell(0), LocalDateTime.now()).setCellStyle(cellDateStyleDateTime);
            //row.createCell(0, cellDateStyleDateTime).setCellValue(dateCreated);
            
            //Maybe add # of total lottery participants, # of total seats available, break it down by tier
                //Tier 1: 0
                //Tier 2: 3
                //...
            int totalOpenSeats = 0;
            int totalProspectiveStudents = 0;
            for (Map.Entry<Grade, Lottery> entry : gradeLotteryMap.entrySet()) {
                Grade grade = entry.getKey();
                Lottery lottery = entry.getValue();
                row = sheet.createRow(rowCounter++);
                int numStudents = lottery.getAllStudents().size();
                row.createCell(0).setCellValue(grade.getGradeDescription() + ": " + lottery.getOpenSeats() + " Seats, " + numStudents + " Prospective Students");
                totalOpenSeats += lottery.getOpenSeats();
                totalProspectiveStudents += numStudents;
            }
            row = sheet.createRow(rowCounter++);
            row.createCell(0).setCellValue("Total Available Seats: " + totalOpenSeats + "; Total Prospective Students: " + totalProspectiveStudents);

            row = sheet.createRow(rowCounter++);
            row.createCell(0);
            
            setColumnWidth(sheet, 0, 30);
            
            //Last Name, First Name, Tier, Empty Column, Lottery Draw #, Wait List #, Notes
            for (Map.Entry<Grade, Lottery> entry : gradeLotteryMap.entrySet()) {
                Grade grade = entry.getKey();
                Lottery lottery = entry.getValue();
                sheet = wb.createSheet(grade.getGradeDescription());
                row = sheet.createRow(0);
                int colCount = 0;
                row.createCell(colCount ++).setCellValue("Last Name");
                row.createCell(colCount ++).setCellValue("First Name");
                row.createCell(colCount ++).setCellValue("Tier");
                row.createCell(colCount ++).setCellValue("X Column");
                row.createCell(colCount ++).setCellValue("Lottery Draw");
                row.createCell(colCount ++).setCellValue("Waitlist Number");
                row.createCell(colCount ++).setCellValue("Notes");
                Map<Tier, List<ProspectiveStudent>> prospectiveStudentsTierMap = lottery.getTierPS_List();
                rowCounter = 1;
                int numSeats = lottery.getOpenSeats();
                int maxWidthLastName = ColumnsExport.LAST_NAME.getNumCharsForWidth();
                int maxWidthFirstName = ColumnsExport.FIRST_NAME.getNumCharsForWidth();
                int widthLotteryDraw = ColumnsExport.LOTTERY_DRAW.getNumCharsForWidth();
                int widthWaitList = ColumnsExport.WAIT_LIST_NUMBER.getNumCharsForWidth();
                for (Tier tier : Tier.values()) {
                    if (prospectiveStudentsTierMap.get(tier) == null) continue;
                    for (ProspectiveStudent prospectiveStudent : prospectiveStudentsTierMap.get(tier)) { // value.getStudentsByTier(tier)) {
                        colCount = 0;
                        row = sheet.createRow(rowCounter++);
                        maxWidthLastName = Math.max(maxWidthLastName, prospectiveStudent.getLastName().length());
                        row.createCell(colCount ++).setCellValue(prospectiveStudent.getLastName());
                        maxWidthFirstName = Math.max(maxWidthFirstName, prospectiveStudent.getFirstName().length());
                        row.createCell(colCount ++).setCellValue(prospectiveStudent.getFirstName());
                        row.createCell(colCount ++, CellType.NUMERIC).setCellValue(tier.getNumber());
                        row.createCell(colCount ++, CellType.BLANK);
                        row.createCell(colCount ++, CellType.NUMERIC).setCellValue(prospectiveStudent.getLotteryDrawNumber());
                        if (numSeats - prospectiveStudent.getLotteryDrawNumber() < 0) {
                            row.createCell(colCount ++, CellType.NUMERIC).setCellValue(prospectiveStudent.getLotteryDrawNumber() - numSeats);
                        } else {
                            row.createCell(colCount ++, CellType.BLANK);
                        }
                        row.createCell(colCount ++, CellType.BLANK);
                    }
                }
                setColumnWidth(sheet, ColumnsExport.LAST_NAME.getOrder(), maxWidthLastName);
                setColumnWidth(sheet, ColumnsExport.FIRST_NAME.getOrder(), maxWidthFirstName);
                setColumnWidth(sheet, ColumnsExport.LOTTERY_DRAW.getOrder(), widthLotteryDraw);
                setColumnWidth(sheet, ColumnsExport.WAIT_LIST_NUMBER.getOrder(), widthWaitList);
                setColumnWidth(sheet, ColumnsExport.NOTES.getOrder(), ColumnsExport.NOTES.getNumCharsForWidth());
            }
            
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            wb.write(outputStream);
            
            //Write it out to a file
            FileOutputStream fop = new FileOutputStream(file);
            // if file doesnt exists, then create it
            if (!file.exists()) {
                    file.createNewFile();
            }
            fop.write(outputStream.toByteArray());
            fop.flush();
            fop.close();
            this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            JOptionPane.showMessageDialog(this, "Export complete at\n\n" + file.toString(), "Export Complete", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Problem exporting the file: " + ex.getMessage(), "Problem Writing the File", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }
    
    private void setColumnWidth(Sheet sheet, int colIndex, int numChars) {
        sheet.setColumnWidth(colIndex, ((int) (numChars * 1.05))  * 256);
    }
    
    private Cell setDateCell(Cell cell, LocalDateTime dateTimeObj) {
        if (dateTimeObj != null) {
            cell.setCellValue(toDateObject(dateTimeObj));
        }
        return cell;
    }
    
    public Date toDateObject(LocalDateTime localDateTime) {
        if (localDateTime == null) return null;
        return Date.from(localDateTime.atZone(ZoneId.systemDefault()).toInstant());
    }
    
    public String convertDateToString(LocalDateTime date, boolean includeTime) {
        if (date == null) return null;
        if (includeTime) {
            return DATE_AND_TIME_FORMAT.format(date);
        } else {
            return DATE_ONLY_FORMAT.format(date);
        }
    }
    
    public void resetCursor() {
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }
    
    private boolean isGradeChecked(Grade grade) {
        JCheckBox tempCheckBox = gradeCheckBoxesMap.get(grade);
        return tempCheckBox.isSelected();
    }
    
    private void jCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {            
        saveSettings();
        rePopulateProspectiveStudents();
    } 
    
    private void jTextFieldAvailableSeatsFocusLost(java.awt.event.FocusEvent evt) {
        saveSettings();
    }
    
    private void rePopulateProspectiveStudents() {
        //Need to know how many columns to show...
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        dbRecordCellList = new ArrayList<>();
        JTableProspectiveStudents prospectiveStudentsTable;
        Object[][] tableItems = new Object[1][7];
        prospectiveStudentsTable = new JTableProspectiveStudents();
        String[] headerCols = Columns.getColumnHeaders();
        prospectiveStudentsTable.setTableHeaderRow(headerCols);
        
        int rowCounter = 0;
        for (Map.Entry<Grade, Lottery> entry : gradeLotteryMap.entrySet()) {
            Grade grade = entry.getKey();
            if (!isGradeChecked(grade)) {
                continue;
            }
            Lottery value = entry.getValue();
            Map<Tier, List<ProspectiveStudent>> prospectiveStudentsTierMap = value.getTierPS_List();
            for (Tier tier : Tier.values()) {
                if (prospectiveStudentsTierMap.get(tier) == null) continue;
                for (ProspectiveStudent prospectiveStudent : prospectiveStudentsTierMap.get(tier)) { // value.getStudentsByTier(tier)) {
                    int colCounter = 0;
                    DB_RecordCell tempCell = new DB_RecordCell(String.valueOf(prospectiveStudent.getLotteryDrawNumber()), rowCounter, colCounter);
                    tempCell.setProspectiveStudent(prospectiveStudent);
                    dbRecordCellList.add(tempCell);
                    //tableItems[rowCounter][colCounter++] = tempCell;
                    tempCell = new DB_RecordCell(prospectiveStudent.getLastName(), rowCounter, colCounter++);
                    tempCell.setProspectiveStudent(prospectiveStudent);
                    dbRecordCellList.add(tempCell);
                    //tableItems[rowCounter][colCounter++] = tempCell;
                    tempCell = new DB_RecordCell(prospectiveStudent.getFirstName(), rowCounter, colCounter++);
                    tempCell.setProspectiveStudent(prospectiveStudent);
                    dbRecordCellList.add(tempCell);
                    //tableItems[rowCounter][colCounter++] = tempCell;
                    tempCell = new DB_RecordCell(Tier.getNumberStr(prospectiveStudent.getTier()), rowCounter, colCounter++);
                    tempCell.setProspectiveStudent(prospectiveStudent);
                    dbRecordCellList.add(tempCell);
                    //tableItems[rowCounter][colCounter++] = tempCell;
                    tempCell = new DB_RecordCell(Grade.getNumberStr(prospectiveStudent.getGrade()), rowCounter, colCounter++);
                    tempCell.setProspectiveStudent(prospectiveStudent);
                    dbRecordCellList.add(tempCell);
                    //tableItems[rowCounter][colCounter++] = tempCell;
                    tempCell = new DB_RecordCell(prospectiveStudent.getFamilyKey(), rowCounter, colCounter++);
                    tempCell.setProspectiveStudent(prospectiveStudent);
                    dbRecordCellList.add(tempCell);
                    //tableItems[rowCounter][colCounter++] = tempCell;
                    tempCell = new DB_RecordCell(String.valueOf(prospectiveStudent.getSiblingsOnWaitlist().size()), rowCounter, colCounter++);
                    tempCell.setProspectiveStudent(prospectiveStudent);
                    dbRecordCellList.add(tempCell);
                    //tableItems[rowCounter][colCounter++] = tempCell;
                    rowCounter ++;
                }
            }
        }
        
//        int totalCells = dbRecordCellList.size();
//        int totalRows = totalCells / 7;
        
        tableItems = new Object[rowCounter][7];
        
        rowCounter = 0;
        int colCounter = 0;
        for (DB_RecordCell dB_RecordCell : dbRecordCellList) {
            tableItems[rowCounter][colCounter++] = dB_RecordCell;
            if (colCounter > 6) {
                rowCounter ++;
                colCounter = 0;
            }
        }
        
        prospectiveStudentsTable.setProspectiveStudents(tableItems);
        prospectiveStudentsTable.setTableHeaderRow(headerCols);
        prospectiveStudentsTable.initTable();
        prospectiveStudentsTable.addActionListener(this);
        jScrollPaneProspectiveStudents.setViewportView(prospectiveStudentsTable);
        //pack();
        updateDB_Search();
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }
    
    private void addToLottery(ProspectiveStudent ps) {
        if (ps == null) return;
        Grade grade = ps.getGrade();
        Lottery tempLottery = gradeLotteryMap.get(grade);
        String availableSeats = gradeAvailableSeatsMap.get(grade).getText().trim();
        if (tempLottery == null) {
            int numSeats = 0;
            if (availableSeats != null) {
                try {
                    numSeats = Integer.parseInt(availableSeats);
                } catch (Exception ex) {
                    numSeats = 0;
                    gradeAvailableSeatsMap.get(grade).setText("0");
                    JOptionPane.showMessageDialog(this, "The available seats for the " + grade.name() + " grade is not a number", "Invalid Seats Value", JOptionPane.WARNING_MESSAGE);
                }
            }
            tempLottery = new Lottery(grade, numSeats);
            gradeLotteryMap.put(grade, tempLottery);
        }
        List<ProspectiveStudent> tierList = tempLottery.getTierPS_List().get(ps.getTier());
        if (tierList == null) {
            tierList = new ArrayList<>();
            tempLottery.getTierPS_List().put(ps.getTier(), tierList);
        }
        tierList.add(ps);
    }
    
    /**
     * This might need to be called if the tiers changed due to sibling modifications.  In fact, this
     * should be run prior to the lottery shuffle for each grade.
     * @param lottery 
     */
    private void rebuildTierList(Lottery lottery) {
        List<ProspectiveStudent> tempList = new ArrayList<>();
        for (Map.Entry<Tier, List<ProspectiveStudent>> entry : lottery.getTierPS_List().entrySet()) {
            Tier key = entry.getKey();
            List<ProspectiveStudent> value = entry.getValue();
            tempList.addAll(value);
            value.clear();
        }
        
        for (ProspectiveStudent ps : tempList) {
            List<ProspectiveStudent> tierList = lottery.getTierPS_List().get(ps.getTier());
            if (tierList == null) {
                tierList = new ArrayList<>();
                lottery.getTierPS_List().put(ps.getTier(), tierList);
            }
            tierList.add(ps);
        }
        
    }
    
    private void runLottery() {
        //Need to start a runnable
        progress = 0.0;
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        LotteryThread target = new LotteryThread();
        target.setLotteryFrame(this);
        Thread th = new Thread(target, "Lottery");
        th.start();
        jButtonExport.setEnabled(true);
    }
    
    private class LotteryThread implements Runnable {
        
        LotteryFrame lotteryFrame;
        private NumberFormat percentCompleteFormat = NumberFormat.getPercentInstance();
        private boolean skipFutureDialogs = false;
        private int answer = -1;

        public void setLotteryFrame(LotteryFrame lotteryFrame) {
            this.lotteryFrame = lotteryFrame;
        }
        
        @Override
        public void run() {
            //Go through the grade lottery map
            //Get the number of available seats
            //Shuffle each tier array
            //Set the lottery draw number based on a counter
            //If there is an available seat, set the 'available seat' flag
                //Check for any siblings (siblings list).  Update the tier accordingly.
            //Need to get a total count to provide a percentage
            String originalButtonText = jButtonStartLottery.getText();
            int numStudents = getLotteryStudents(true).size();
            int studentCounter = 0;
            percentCompleteFormat.setMaximumFractionDigits(0);
            for (Map.Entry<Grade, Lottery> entry : gradeLotteryMap.entrySet()) {
                Grade grade = entry.getKey();
                if (!isGradeChecked(grade)) {
                    continue;
                }
                if (grade.isLotteryComplete()) {
                    if (skipFutureDialogs) {
                        if (answer != JOptionPane.YES_OPTION) {
                            continue;
                        }
                    } else {
                        //int answer = continueOnAlreadyExists(grade);
                        JCheckBox checkbox = new JCheckBox("Use my selection for the rest of the grades.");
                        String message = "The " + grade.getGradeDescription()
                            + " grade has already had the lottery.  Do you really want to run it again?";
                        Object[] params = {message, checkbox};
                        answer = JOptionPane.showConfirmDialog(null, params,
                            "Lottery Already Exists", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                        skipFutureDialogs = checkbox.isSelected();
                        if (answer != JOptionPane.YES_OPTION) {
                            continue;
                        }
                    }
                }
                Lottery value = entry.getValue();
                int numSeats = value.getOpenSeats();
                int lotteryDrawCounter = 1;
                rebuildTierList(value);
                Map<Tier, List<ProspectiveStudent>> prospectiveStudentsTierMap = value.getTierPS_List();
                for (Tier tier : Tier.values()) {
                    if (prospectiveStudentsTierMap.get(tier) == null) continue;
                    Random rnd = new Random();
                    List<ProspectiveStudent> prospectiveStudentsList = prospectiveStudentsTierMap.get(tier);
                    Collections.shuffle(prospectiveStudentsList);
                    for (ProspectiveStudent prospectiveStudent : prospectiveStudentsList) {
                        //Need to do this if the lottery is being run again
                        prospectiveStudent.setAvailableSeatOffered(false);
                        studentCounter ++;
                        progress = (double) studentCounter / (double) numStudents;
                        prospectiveStudent.setLotteryDrawNumber(lotteryDrawCounter++);
                        if (numSeats > 0) {
                            Tier studentTier = prospectiveStudent.getTier();
                            Tier newTier;
                            switch (studentTier) {
                                case CHILDREN_OF_EMPLOYEES_1:
                                    newTier = Tier.CHILDREN_OF_EMPLOYEES_1;
                                    break;
                                case SIBLINGS_IN_DISTRICT_2:
                                    newTier = Tier.SIBLINGS_IN_DISTRICT_2;
                                    break;
                                case SIBLINGS_IN_NEARBY_COUNTIES_3:
                                    newTier = Tier.SIBLINGS_IN_NEARBY_COUNTIES_3;
                                    break;
                                case SIBLINGS_ALL_OTHER_4:
                                    newTier = Tier.SIBLINGS_ALL_OTHER_4;
                                    break;
                                case DISTRICT_RESIDENTS_5:
                                    newTier = Tier.SIBLINGS_IN_DISTRICT_2;
                                    break;
                                case NEARBY_COUNTY_RESIDENTS_6:
                                    newTier = Tier.SIBLINGS_IN_NEARBY_COUNTIES_3;
                                    break;
                                case ALL_OTHER_7:
                                    newTier = Tier.SIBLINGS_ALL_OTHER_4;
                                    break;
                                default:
                                    newTier = Tier.UNKNOWN;
                                    break;
                            }
                            prospectiveStudent.setAvailableSeatOffered(true);
                            numSeats --;
                            if (newTier.getNumber() > -1) {
                                for (ProspectiveStudent sibling : prospectiveStudent.getSiblingsOnWaitlist()) {
                                    //Need to bump a tier
                                    if (newTier.getNumber() < sibling.getTier().getNumber()) {
                                        sibling.setTier(newTier);
                                    } else if (newTier.getNumber() > sibling.getTier().getNumber()) {
                                        //DT:  This shouldn't happen...
                                    }
                                }
                            }
                        }
                        updateProgressOutput();
                    }
                }
                grade.setLotteryComplete(true);
            }
            updateCheckboxBackgrounds();
            rePopulateProspectiveStudents();
            jButtonStartLottery.setText(originalButtonText);
            lotteryFrame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            JOptionPane.showMessageDialog(null, "Lottery Complete!", "Finished", JOptionPane.INFORMATION_MESSAGE);
        }        
        
        private void updateProgressOutput() {
            try {
                Thread.sleep(0, 50);
            } catch (InterruptedException ex) {
                Logger.getLogger(LotteryFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            //progress = Math.min(progress, slowCounter / 20);

            jButtonStartLottery.setText(percentCompleteFormat.format(progress));
        }
    }
    
    private void updateCheckboxBackgrounds() {
        for (Map.Entry<Grade, JCheckBox> entry : gradeCheckBoxesMap.entrySet()) {
            Grade grade = entry.getKey();
            JCheckBox checkboxObj = entry.getValue();
            if (grade.isLotteryComplete()) {
                //checkboxObj.setBackground(new Color(0xEE, 0xC8, 0x48));
                checkboxObj.setBackground(Utilities.LIGHT_GREEN_COLOR);
                checkboxObj.setOpaque(true);
            } else {
                checkboxObj.setBackground(new Color(0xCC, 0xD0, 0xD8));
                checkboxObj.setOpaque(true);
            }
        }
    }
    
    private List<ProspectiveStudent> getLotteryStudents(boolean getOnlyChecked) {
        List<ProspectiveStudent> prospectiveStudentList = new ArrayList<>();
        for (Map.Entry<Grade, Lottery> entry : gradeLotteryMap.entrySet()) {
            Grade grade = entry.getKey();
            if (getOnlyChecked && !isGradeChecked(grade)) {
                continue;
            }
            Lottery value = entry.getValue();
            Map<Tier, List<ProspectiveStudent>> prospectiveStudentsTierMap = value.getTierPS_List();
            for (Tier tier : Tier.values()) {
                if (prospectiveStudentsTierMap.get(tier) == null) continue;
                prospectiveStudentList.addAll(prospectiveStudentsTierMap.get(tier));
            }
        }
        return prospectiveStudentList;
    }

    /**
     * Updates the search pattern based on the search text for the EEPROM Database programmed
     * data table.  Uses 'Pattern' and 'Matcher' so the start and end of the match can be highlighted.
     */
    private void updateDB_Search() {
        String searchValue = jTextFieldFilterStudents.getText();
        Pattern searchPattern = null;
        try {
            searchPattern = Pattern.compile(searchValue, Pattern.CASE_INSENSITIVE);
        } catch (PatternSyntaxException ex) {
            //ignore
        }
        Matcher searchMatcher = null;
        for (DB_RecordCell cellObj : dbRecordCellList) {
            if (cellObj.getValue() == null) {
                continue;
            }
            searchMatcher = searchPattern.matcher(cellObj.getValue());
            if (searchMatcher.find()) {
                cellObj.setSearchMatch(true);
                cellObj.setSearchStart(searchMatcher.start());
                cellObj.setSearchEnd(searchMatcher.end());
            } else {
                cellObj.setSearchMatch(false);
            }
        }
        //Now only show those rows in the table where a match exists
        JTableProspectiveStudents prospectiveStudentsTable = getProspectiveStudentsTable();
        if (prospectiveStudentsTable != null) {
            prospectiveStudentsTable.applyFilter(searchValue, false);
            jLabelNumRecords.setText(String.valueOf(prospectiveStudentsTable.numRowsViewable()));
        }
    }
    
    private JTableProspectiveStudents getProspectiveStudentsTable() {
        Component tableComp = jScrollPaneProspectiveStudents.getViewport().getView();
        if (tableComp instanceof JTableProspectiveStudents) {
            return (JTableProspectiveStudents) tableComp;
        }
        return null;
    }
    
    private void loadSettings() {
        //file format is Field Name~value
            //For multiple values, it is Field Name~value1,value2,value3
            //For multiple values with pairs, it is Field Name~key1:value1,key2:value2,key3:value3
        try {
            ArrayList<String> settingsList = FileUtilities.readLinesFromFile(Paths.get(homeDir, appName, toolSettingsFileName));
            
            String temp;
            String[] gradeInfo;
            for (String pref : settingsList) {
                String[] setting = pref.split("~");
                if (setting.length < 2) continue;
                temp = setting[1];
                if (null != setting[0]) switch (setting[0]) {
                    case SOURCE_LOCATION_DESC:
                        jTextFieldMasterFileSource.setText(temp);
                        break;
                    case DESTINATION_LOCATION_DESC:
                        jTextFieldDestination.setText(temp);
                    //    break;
                    case GRADES_CHECKED:
                        //Format is grade #:boolean like 12:false, 11:true, and so on...
                        gradeInfo = temp.trim().split(",");
                        for (String gradeBoolean : gradeInfo) {
                            String[] gradeDetail = gradeBoolean.trim().split(":");
                            if (gradeDetail.length < 2) {
                                continue;
                            }
                            try {
                                String gradeNumStr = gradeDetail[0].trim();
                                boolean selected = Boolean.valueOf((String) gradeDetail[1].trim());
                                Grade savedGrade = Grade.getGrade(gradeNumStr);
                                if (savedGrade != Grade.UNKNOWN) {
                                    gradeCheckBoxesMap.get(savedGrade).setSelected(selected);
                                }
                            } catch (Exception ex) {
                                continue;
                            }
                        }
                        break;
                    case GRADES_OPEN_SEATS:
                        //Format is grade #:boolean like 12:false, 11:true, and so on...
                        gradeInfo = temp.trim().split(",");
                        for (String gradeSeats : gradeInfo) {
                            String[] gradeDetail = gradeSeats.trim().split(":");
                            if (gradeDetail.length < 2) {
                                continue;
                            }
                            try {
                                String gradeNumStr = gradeDetail[0].trim();
                                String numSeatsStr = gradeDetail[1].trim();
                                Grade savedGrade = Grade.getGrade(gradeNumStr);
                                if (savedGrade != Grade.UNKNOWN) {
                                    gradeAvailableSeatsMap.get(savedGrade).setText(numSeatsStr);
                                }
                            } catch (Exception ex) {
                                continue;
                            }
                        }
                        break;
                    case SPREADSHEET_COLUMNS:
                        String[] columnInfo = temp.trim().split(",");
                        for (String columnStr : columnInfo) {
                            String[] columnDetail = columnStr.trim().split(":");
                            if (columnDetail.length < 2) {
                                continue;
                            }
                            try {
                                String colNumber = columnDetail[0].trim();
                                String spreadsheetColStr = columnDetail[1].trim();
                                Columns savedCol = Columns.getColumn(colNumber);
                                if (savedCol != null) {
                                    savedCol.setSpreadsheetColumn(spreadsheetColStr);
                                }
                            } catch (Exception ex) {
                                continue;
                            }
                        }
                        break;
                    default:
                        break;
                }
            }
        } catch (Exception ex) {
            
        }
    }
    
    public void saveSettings() {
        StringBuffer stringToWrite = new StringBuffer("");
        stringToWrite.append(SOURCE_LOCATION_DESC).append("~").append(jTextFieldMasterFileSource.getText()).append("\n");
        stringToWrite.append(DESTINATION_LOCATION_DESC).append("~").append(jTextFieldDestination.getText()).append("\n");
        stringToWrite.append(GRADES_CHECKED).append("~");
        for (Map.Entry<Grade, JCheckBox> entry : gradeCheckBoxesMap.entrySet()) {
            Grade key = entry.getKey();
            JCheckBox value = entry.getValue();
            stringToWrite.append(String.valueOf(key.getNumber())).append(":").append(value.isSelected()).append(",");
        }
        stringToWrite.append("\n");
        
        stringToWrite.append(GRADES_OPEN_SEATS).append("~");
        for (Map.Entry<Grade, JTextField> entry : gradeAvailableSeatsMap.entrySet()) {
            Grade key = entry.getKey();
            JTextField value = entry.getValue();
            //If it's not numeric, skip it
            try {
                Integer.parseInt(value.getText().trim());
                stringToWrite.append(String.valueOf(key.getNumber())).append(":").append(value.getText()).append(",");
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "The value '" + value.getText().trim() + "' for the " + key.getGradeDescription() + " grade should be a whole number.", 
                    "Issue Saving Value", JOptionPane.ERROR_MESSAGE);
            }
        }
        stringToWrite.append("\n");
        
        //Save spreadsheet settings
        stringToWrite.append(SPREADSHEET_COLUMNS).append("~");
        for (Columns value : Columns.values()) {
            stringToWrite.append(String.valueOf(value.getOrder())).append(":").append(value.getSpreadsheetColumn()).append(",");
        }
        stringToWrite.append("\n");
        
        Path fileDest = Paths.get(homeDir, appName, toolSettingsFileName);
        try {
            FileUtilities.writeStringToFile(fileDest, stringToWrite, false);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Problem saving settings:  " + ex.getMessage(), 
                    "Issue Saving Settings", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }
    
    @Override
    protected void processWindowEvent(WindowEvent e) {
        switch(e.getID()) {
            case WindowEvent.WINDOW_CLOSING:
                //closeWindow();
                System.exit(0);
                break;
            case WindowEvent.WINDOW_ACTIVATED:
                //showDialogOnFocus(dialog1);
                //showDialogOnFocus(dialog2);
                //showDialogOnFocus(dialog3);
                timeStamp = System.currentTimeMillis();
                break;
            default:
                break;
        }
    }
    
    /**
     *In order to get the option fuse dialog to show when activating the tool,
     *it needs to be made visible.  However, the main frame should be
     *shown on top.  When making the option fuse dialog visible, it wants
     *to bring it to the front, whereas we only want it to show one layer
     *below the main frame.  We also only want to do this if the option
     *dialog is visible in the first place.  The 'timestamp' portion avoids
     *the same commands being hit multiple times by multiple event calls.
     *To avoid a 'blinking' effect by showing the option dialog then bringing
     *the main frame back to the front, temporarily setting the main frame
     *to always be on top helps to minimize (not eliminate) this undesired
     *effect.
     * @param dialog JDialog to attempt to bring close to front with main frame
     */
    private void showDialogOnFocus(JDialog dialog) {
        if (dialog != null && dialog.isVisible()
                && ((System.currentTimeMillis() - timeStamp) > 100)) {
            setAlwaysOnTop(true);
            dialog.setVisible(true);
        } else {
            setAlwaysOnTop(false);
        }
    }
    

    @Override
    public void actionPerformed(ActionEvent e) {
        String actionCommand = e.getActionCommand();
        if (e.getSource() instanceof JTextFieldFilter) {
            if (e.getSource() == jTextFieldFilterStudents) {
                updateDB_Search();
            }
        }
    }
    
}
